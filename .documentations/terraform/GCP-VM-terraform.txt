https://cloud.google.com/community/tutorials/getting-started-on-gcp-with-terraform

# set up a service account key, which Terraform will use to create and manage resources in your Google Cloud project.
https://console.cloud.google.com/apis/credentials/serviceaccountkey?_ga=2.36962336.160527076.1592683937-518443176.1591652400&project=iti-project-281015&folder&organizationId
#downloads a JSON file with all the credentials that will be needed for Terraform to manage the resources.
# add the credentials
vi ~/cred.json

# Create a new directory for the project to live and create a main.tf file for the Terraform config.
# The contents of this file describe all of the Google Cloud resources that will be used in the project
mkdir gcp-vm ; cd gcp-vm
vim main.tf

// Configure the Google Cloud provider
provider "google" {
 credentials = file("/home/terraform/cred.json")
 project     = "iti-project-281015"
 region      = "us-west1"
}
// Terraform plugin for creating random ids
resource "random_id" "instance_id" {
 byte_length = 8
}

// A single Compute Engine instance
resource "google_compute_instance" "default" {
 name         = "flask-vm-${random_id.instance_id.hex}"
 machine_type = "f1-micro"
 allow_stopping_for_update = true // so we can change the machine type without destroying
 zone         = "us-west1-a"

 metadata = {
   ssh-keys = "atef:${file("~/.ssh/id_rsa.pub")}"
            }

 boot_disk {
   initialize_params {
     image = "debian-cloud/debian-9"
   }
 }

// Make sure flask is installed on all new instances for later steps
 metadata_startup_script = "sudo apt-get update; sudo apt-get install -yq build-essential python-pip rsync; pip install flask"

 network_interface {
   network = "default"

   access_config {
     // Include this section to give the VM an external ip address
   }
 }

}
// A variable for extracting the external IP address of the instance
output "ip" {
 value = google_compute_instance.default.network_interface.0.access_config.0.nat_ip
}

#####################
terraform init
terraform plan
terraform apply
ssh atef@`terraform output ip`
vi app.py

from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_cloud():
   return 'Hello Cloud!'

app.run(host='0.0.0.0')

python app.py
# curl from other session 
curl http://0.0.0.0:5000

# Open port 5000 on the instance

resource "google_compute_firewall" "default" {
 name    = "flask-app-firewall"
 network = "default"

 allow {
   protocol = "tcp"
   ports    = ["5000"]
 }
}


# to delete everything that was created 
terraform destroy






